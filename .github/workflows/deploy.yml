name: Deploy to Cloud Run

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: Authorize Docker push
        run: gcloud auth configure-docker ${{ vars.GCP_REGION }}-docker.pkg.dev

      - name: Build Docker image
        run: |
          docker compose -f docker-compose.yml build \
            --build-arg GITHUB_CLIENT_ID=${{ secrets.GH_CLIENT_ID }} \
            --build-arg GITHUB_CLIENT_SECRET=${{ secrets.GH_CLIENT_SECRET }} \
            --build-arg REDIRECT_URI=${{ vars.REDIRECT_URI }}

      - name: Tag Docker image
        run: docker tag deno-image ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/deno-repository/deno-cloudrun-image:${{ github.sha }}

      - name: Push Docker image
        run: docker push ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/deno-repository/deno-cloudrun-image:${{ github.sha }}

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: deno-service
          image: ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/deno-repository/deno-cloudrun-image:${{ github.sha }}
          region: ${{ vars.GCP_REGION }}
          env_vars: |
            ENV=PRODUCTION
            DENO_KV_PATH=/app/db/sqlite.db
            GCS_BUCKET=${{ vars.GCS_BUCKET }}
            GITHUB_CLIENT_ID=${{ secrets.GH_CLIENT_ID }}
            GITHUB_CLIENT_SECRET=${{ secrets.GH_CLIENT_SECRET }}
            REDIRECT_URI=${{ vars.REDIRECT_URI }}
          flags: --allow-unauthenticated --memory=1Gi

      - name: Debug Environment Variables
        run: |
          echo "GCS_BUCKET value exists: ${{ vars.GCS_BUCKET != '' }}"
          echo "GH_CLIENT_ID secret exists: ${{ secrets.GH_CLIENT_ID != '' }}"
          echo "GH_CLIENT_SECRET secret exists: ${{ secrets.GH_CLIENT_SECRET != '' }}"
          echo "REDIRECT_URI value exists: ${{ vars.REDIRECT_URI != '' }}"

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy to Firebase Hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          FIREBASE_PROJECT: ${{ vars.GCP_PROJECT_ID || 'replix-394315' }}
        run: |
          # Create .firebaserc file dynamically
          echo '{
            "projects": {
              "default": "'$FIREBASE_PROJECT'"
            }
          }' > .firebaserc

          # Create firebase.json file dynamically with custom domain and redirects
          echo '{
            "hosting": {
              "public": "public",
              "ignore": [
                "firebase.json",
                "**/.*",
                "**/node_modules/**"
              ],
              "redirects": [
                {
                  "source": "/post/:postId*",
                  "destination": "https://web.fastro.dev/post/:postId",
                  "type": 301
                }
              ],
              "rewrites": [
                {
                  "source": "**",
                  "destination": "/index.html"
                }
              ],
              "appAssociation": "AUTO",
              "cleanUrls": true
            }
          }' > firebase.json

          # Now deploy to Firebase hosting
          firebase deploy --only hosting --token "$FIREBASE_TOKEN"

      - name: Clean up old images
        if: success()
        run: |
          # Current image SHA
          CURRENT_SHA=${{ github.sha }}
          echo "Current image SHA: $CURRENT_SHA"

          # Set appropriate timeout for gcloud commands
          gcloud config set artifacts/location ${{ vars.GCP_REGION }}

          # List all images with detailed output for debugging
          echo "Listing all available images before cleanup:"
          gcloud artifacts docker images list ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/deno-repository/deno-cloudrun-image \
            --format="table[box](digest.slice(0:12),tags,createTime)" \
            --sort-by=~createTime

          # Extract all digests except the current build (keeping 5 most recent)
          echo "Finding digests to keep and delete:"

          # List all images by createTime (newest first), and keep only the 5 most recent
          ALL_DIGESTS=$(gcloud artifacts docker images list ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/deno-repository/deno-cloudrun-image \
            --sort-by=~createTime \
            --format="value(digest)")

          # Keep track of how many images we've seen
          COUNT=0
          DIGESTS_TO_DELETE=""

          # Process each digest
          for DIGEST in $ALL_DIGESTS; do
            COUNT=$((COUNT + 1))

            # Only delete if it's beyond our keep count (5)
            if [ $COUNT -gt 5 ]; then
              if [ -n "$DIGESTS_TO_DELETE" ]; then
                DIGESTS_TO_DELETE="$DIGESTS_TO_DELETE $DIGEST"
              else
                DIGESTS_TO_DELETE="$DIGEST"
              fi
            fi
          done

          # Delete old images by digest
          if [ -z "$DIGESTS_TO_DELETE" ]; then
            echo "No old images to delete (keeping 5 most recent)"
          else
            echo "Found images to delete:"
            for DIGEST in $DIGESTS_TO_DELETE; do
              # Get the shortened digest for display
              SHORT_DIGEST=$(echo $DIGEST | cut -d':' -f2 | cut -c1-12)
              echo "Deleting image with digest: sha256:$SHORT_DIGEST..."

              # Full image reference with digest
              IMAGE_WITH_DIGEST="${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/deno-repository/deno-cloudrun-image@$DIGEST"

              # Perform the deletion
              gcloud artifacts docker images delete "$IMAGE_WITH_DIGEST" --delete-tags --quiet || echo "Failed to delete image with digest $SHORT_DIGEST"
            done
          fi

          # List remaining images after cleanup
          echo "Remaining images after cleanup:"
          gcloud artifacts docker images list ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/deno-repository/deno-cloudrun-image \
            --format="table[box](digest.slice(0:12),tags,createTime)" \
            --sort-by=~createTime
